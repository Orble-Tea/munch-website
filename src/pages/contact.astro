---
import Layout from "~/layouts/PageLayout.astro";
import Image from "~/components/common/Image.astro";
import dots from "~/assets/images/bg-design/contact-header-bg.png";
import contactTitle from "~/assets/images/contact-title.png";
import DOMPurify from 'dompurify';
import { JSDOM } from 'jsdom';

const metadata = {
  title: "Contact",
};

// Create a DOMPurify instance for server-side sanitization
const window = new JSDOM('').window;
const purify = DOMPurify(window);

const errors = { firstName: "", lastName: "", email: "", subject: "", message: "" };
let log = "Fill out the contact form below for inquiries, partnership opportunities, and/or customer support!";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    // Sanitize all inputs, ensuring we're working with strings
    const firstName = purify.sanitize(String(data.get("FirstName") || ''));
    const lastName = purify.sanitize(String(data.get("LastName") || ''));
    const phoneNumber = purify.sanitize(String(data.get("PhoneNumber") || ''));
    const email = purify.sanitize(String(data.get("Email") || ''));
    const subject = purify.sanitize(String(data.get("Subject") || ''));
    const message = purify.sanitize(String(data.get("Message") || ''));

    // Validate form data
    if (firstName.length < 1) {
      errors.firstName = "Please enter your first name.";
    }
    if (lastName.length < 1) {
      errors.lastName = "Please enter your last name.";
    }
    if (!email.includes("@") || !email.includes(".")) {
      errors.email = "Please enter a valid email address.";
    }
    if (!subject) {
      errors.subject = "Please select a subject.";
    }
    if (message.length < 1) {
      errors.message = "Please enter your message.";
    }

    const hasErrors = Object.values(errors).some(msg => msg);
    
    if (!hasErrors) {
      const content = `First Name: ${firstName}\nLast Name: ${lastName}\nPhone Number: ${phoneNumber}\nEmail: ${email}\n\nSubject: ${subject}\n\nMessage: ${message}`;

      const emailData = {
        to: ["info@orble-tea.com"],
        subject: "Customer Inquiry Form Submission: " + subject,
        text: content,
        "h:Reply-To": email
      };

      const response = await fetch(`${Astro.url.origin}/api/send-email`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(emailData),
      });

      if (!response.ok) {
        throw new Error("An error occurred while sending the email.");
      }

      log = "Form submitted successfully!";
    }
  } catch (error) {
    console.error(error);
    log = "Error: " + (error instanceof Error ? error.message : "An unknown error occurred");
  }
}
---

<style>

  .contact-subtitle {
  text-align: center;
  font-size: 24px;
  font-style: normal;
  font-weight: 400;
  line-height: 30px; /* 125% */
  letter-spacing: 1.92px;
  }

  .contact-label {
    color: #1A2634;
    font-size: 15px;
    font-style: normal;
    font-weight: 500;
    line-height: 20px;
    font-family: Lato;
  }

  @media (min-width: 1024px) {
    .bg-contact-form{
      background-image: url("../assets/images/bg-design/contact-form-bg.png");
      background-repeat: no-repeat;
      background-size: 100% 100%;
    }
  }
  

  .contact-form {
    border-radius: 10px;
    background: white;
    box-shadow: 6px 6px 5px 3px rgba(0, 0, 0, 0.3);
  }

  .contact-input {
    color: black;
    font-size: 14px;
    font-style: normal;
    font-weight: 500;
    line-height: 20px; /* 142.857% */
    font-family: var(--aw-font-serif), ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
  }

  .contact-label {
    font-family: var(--aw-font-serif), ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    font-size: 15px;
    font-weight: 600;
  }
</style>
<Layout metadata={metadata}>
  <div
    id="header"
    class="flex flex-col items-center flex-shrink-0 bg-[#214260] w-full h-[310px]"
  >
    <Image
      src={dots}
      alt="dots"
      style={`max-width: 100%; height: 100%;`}
    />
    <Image
      src={contactTitle}
      alt="Get In Touch"
      width="692px"
      height="71px"
      class="absolute mt-[136px]"
    />
  </div>

  <div id="form-container" class="bg-contact-form bg-gradient-to-b from-[#214260] to-white border-t-[#acc6dd] border-t-4 lg:border-none font-serif pb-32" >
    <div class="flex justify-center">
      <h1 class="w-[815px] contact-subtitle font-serif mt-[71px] mx-8 text-white lg:text-[#1A2634]">
        {log}
      </h1>
    </div>

    <div id="form" class="flex justify-center mt-[71px]">
      <div class="bg-white rounded-md w-[80%] lg:w-[48%] contact-form p-10">
        <form method="POST">
          <div id="textinputs">
            <div class="flex mb-[45px]">
              <div>
                <label for="FirstName" class="contact-label"> First Name</label>
                <input
                  type="text"
                  name="FirstName"
                  required
                  class="border-b-2 border-gray-300 w-[278px] mr-[39px] contact-input"
                />
                {errors.firstName && <p class="text-red-500 text-sm mt-1">{errors.firstName}</p>}
              </div>
              <div>
                <label for="LastName" class="contact-label"> Last Name</label>
                <input
                  type="text"
                  name="LastName"
                  required
                  class="border-b-2 border-gray-300 w-[278px] mr-[39px] contact-input"
                />
                {errors.lastName && <p class="text-red-500 text-sm mt-1">{errors.lastName}</p>}
              </div>
            </div>
            <div class="flex mb-[45px]">
              <div>
                <label for="Email" class="contact-label"> Email</label>
                <input
                  type="email"
                  name="Email"
                  required
                  class="border-b-2 border-gray-300 w-[278px] mr-[39px] contact-input"
                />
                {errors.email && <p class="text-red-500 text-sm mt-1">{errors.email}</p>}
              </div>
              <div>
                <label for="PhoneNumber" class="contact-label">
                  Phone Number
                </label>
                <input
                  type="tel"
                  name="PhoneNumber"
                  class="border-b-2 border-gray-300 w-[278px] mr-[39px] contact-input"
                />
              </div>
            </div>
          </div>

          <div id="subject-select" class="mt-4 mb-[45px]">
            <label for="subject" class="contact-label"> Select Subject</label>

            <div id="radio-buttons" class="flex max-sm:flex-col justify-between flex-wrap mt-4">
              {
                [
                  "General Inquiry",
                  "Partnerships",
                  "Customer Support",
                  "Other",
                ].map((subject) => (
                  <div>
                    <input
                      type="radio"
                      id={subject.toLowerCase().replace(/\s/g, "-")}
                      name="Subject"
                      value={subject.toLowerCase().replace(/\s/g, "-")}
                      class="mr-[10px]"
                      required
                    />
                    <label
                      for={subject.toLowerCase().replace(/\s/g, "-")}
                      class="text-sm mr-[17px]"
                    >
                      {subject}
                    </label>
                  </div>
                ))
              }
            </div>
            {errors.subject && <p class="text-red-500 text-sm mt-1">{errors.subject}</p>}
          </div>

          <div class="flex flex-col my-[45px]">
            <label for="message" class="contact-label"> Message</label>
            <input
              type="text"
              name="Message"
              id="message"
              required
              placeholder="Write your message..."
              class="border-b-2 border-gray-300 w-full contact-input pb-[10px] mt-3 placeholder-[#BDBDBD]"
              maxlength="500"
            />
            {errors.message && <p class="text-red-500 text-sm mt-1">{errors.message}</p>}
          </div>

          <div class="flex justify-end mb-2">
            <button type="submit" class="munch-btn font-serif bg-[#214260]">
              SEND MESSAGE
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      /**
       * Client-side form validation script
       * Provides real-time feedback to users as they interact with the form
       * while maintaining server-side validation for security
       */
      import DOMPurify from 'dompurify';

      // Initialize form and input elements
      const form = document.querySelector('form');
      const inputs = {
        firstName: form.querySelector('input[name="FirstName"]'),
        lastName: form.querySelector('input[name="LastName"]'),
        email: form.querySelector('input[name="Email"]'),
        subject: form.querySelectorAll('input[name="Subject"]'),
        message: form.querySelector('input[name="Message"]')
      };

      // Get corresponding error message elements for each input
      const errorElements = {
        firstName: form.querySelector('input[name="FirstName"] + p'),
        lastName: form.querySelector('input[name="LastName"] + p'),
        email: form.querySelector('input[name="Email"] + p'),
        subject: document.querySelector('#subject-select p'),
        message: form.querySelector('input[name="Message"] + p')
      };

      /**
       * Validation rules for each form field
       * Each function returns an empty string if valid, or an error message if invalid
       * All inputs are sanitized before validation
       */
      const validators = {
        firstName: (value) => {
          const sanitized = DOMPurify.sanitize(value);
          if (!sanitized || sanitized.length < 1) return "Please enter your first name.";
          return "";
        },
        lastName: (value) => {
          const sanitized = DOMPurify.sanitize(value);
          if (!sanitized || sanitized.length < 1) return "Please enter your last name.";
          return "";
        },
        email: (value) => {
          const sanitized = DOMPurify.sanitize(value);
          if (!sanitized || !sanitized.includes('@') || !sanitized.includes('.')) {
            return "Please enter a valid email address.";
          }
          return "";
        },
        subject: (elements) => {
          const selected = Array.from(elements).some(radio => radio.checked);
          return selected ? "" : "Please select a subject.";
        },
        message: (value) => {
          const sanitized = DOMPurify.sanitize(value);
          if (!sanitized || sanitized.length < 1) return "Please enter your message.";
          return "";
        }
      };

      // Add form submit handler to sanitize all data before submission
      form.addEventListener('submit', (e) => {
        const formData = new FormData(form);
        for (let [key, value] of formData.entries()) {
          if (typeof value === 'string') {
            formData.set(key, DOMPurify.sanitize(value));
          }
        }
      });

      /**
       * Updates the error message display for a given field
       * @param {string} field - The field name (firstName, lastName, etc.)
       * @param {string} message - The error message (empty if valid)
       */
      function updateErrorMessage(field, message) {
        const errorElement = errorElements[field];
        if (errorElement) {
          errorElement.textContent = message;
          // Only show the error element if there's an error message
          errorElement.style.display = message ? 'block' : 'none';
        }
      }

      // Add real-time validation listeners to text inputs
      inputs.firstName.addEventListener('input', (e) => {
        updateErrorMessage('firstName', validators.firstName(e.target.value));
      });

      inputs.lastName.addEventListener('input', (e) => {
        updateErrorMessage('lastName', validators.lastName(e.target.value));
      });

      inputs.email.addEventListener('input', (e) => {
        updateErrorMessage('email', validators.email(e.target.value));
      });

      // Add change listeners to radio buttons
      inputs.subject.forEach(radio => {
        radio.addEventListener('change', () => {
          updateErrorMessage('subject', validators.subject(inputs.subject));
        });
      });

      inputs.message.addEventListener('input', (e) => {
        updateErrorMessage('message', validators.message(e.target.value));
      });

      // Initialize error messages as hidden
      Object.keys(errorElements).forEach(field => {
        const errorElement = errorElements[field];
        if (errorElement) {
          errorElement.style.display = 'none';
        }
      });
    </script>
  </div>
</Layout>
